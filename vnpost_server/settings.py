"""
Django settings for interview_server project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os 
from datetime import timedelta
# import sentry_sdk
# from sentry_sdk.integrations.django import DjangoIntegration

# sentry_sdk.init(
#     dsn="https://05e6bf5b39c84d258d9cda605326af3e@o528790.ingest.sentry.io/5646366",
#     integrations=[DjangoIntegration()],
#     traces_sample_rate=1.0,

#     # If you wish to associate users to errors (assuming you are using
#     # django.contrib.auth) you may enable sending PII data.
#     send_default_pii=True
# )

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent # The base directory of the project 


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '641be+z+0hu9#uxsf*w=p&=5f2fdd!j3)7owi!f*43-7t9le^^' 

# SECURITY WARNING: don't run with debug turned on in production!
# The Debug boolean config: 
# True: When error, the error will show in frontend to client 
# Face: When error, the error will not show
DEBUG = False if str(os.getenv('DEBUG')).lower() == 'false' else True

# The allowed list that allow client IP to call to server
# *: Allow all 
# Should be only localhost and same domain call 
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'jet.dashboard', # Django jet config: https://github.com/geex-arts/django-jet
    'jet', # Django jet config
    'django.contrib.admin', # Django default config: https://docs.djangoproject.com/en/3.1/ref/settings/
    'django.contrib.auth', # Django default config 
    'django.contrib.contenttypes', # Django default config 
    'django.contrib.sessions', # Django default config 
    'django.contrib.messages', # Django default config 
    'django.contrib.staticfiles', # Django default config 
    'rest_framework', # Django Rest Framework config: The library that help Django define Restful API faster
    'django_filters', # Django filters: The library that add filters to Django Rest Framework 
    'django_extensions', 
    'frontend', # frontend app, in interview_server/frontend
    'backend', # backend app, in interview_server/backend
]

# Django default MIDDLEWARE: https://docs.djangoproject.com/en/3.1/topics/http/middleware/
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# All APIs URL come froms interview_server/urls.py
ROOT_URLCONF = 'vnpost_server.urls'

# Django default TEMPLATES settings: https://docs.djangoproject.com/en/3.1/topics/templates/
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Django default WSGI_APPLICATION, to deploy Django more stable, we should use WSGI using Gunicorn: https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/gunicorn/
WSGI_APPLICATION = 'vnpost_server.wsgi.application'

# Append Splash: "/" for all API URLs
APPEND_SLASH = True

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    DB_MAX_THREADS = 1
else:
    # DATABASES = {
    #     'default': {
    #         # If you are using Cloud SQL for MySQL rather than PostgreSQL, set
    #         # 'ENGINE': 'django.db.backends.mysql' instead of the following.
    #         'ENGINE': 'django.db.backends.postgresql',
    #         'NAME': 'interview_server',
    #         'USER': os.getenv('DATABASE_USER', 'cloudsql'),
    #         'PASSWORD': os.getenv('DATABASE_PASSWORD', 'cloudsql'),
    #         'HOST': '127.0.0.1',
    #         'PORT': '5432',
    #     }
    # }
    DATABASES = {
            'default': {
                # If you are using Cloud SQL for MySQL rather than PostgreSQL, set
                # 'ENGINE': 'django.db.backends.mysql' instead of the following.
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'postgres',
                'USER': 'postgres',
                'PASSWORD': 'postgres',
                'HOST': '127.0.0.1',
                'PORT': '5432',
            }
        }

# Django Rest Framework config 
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # JWT Authentication for Django API call: https://github.com/SimpleJWT/django-rest-framework-simplejwt
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Now we allow any request without Authentication
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_FILTER_BACKENDS': (
        # Add filter backend of django-filters: https://django-filter.readthedocs.io/en/stable/
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ),
    # Pagination for Django Rest Framework: https://www.django-rest-framework.org/api-guide/pagination/
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20
}
LOGIN_URL = '/admin/'

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS: https://docs.djangoproject.com/en/3.1/topics/auth/passwords/
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# Locales config for Django: https://docs.djangoproject.com/en/3.1/topics/i18n/formatting/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Japan'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

if DEBUG:
    STATIC_URL = '/static/'
else:
    # When deploy, we need static files (HTML, CSS, JS) are on Google Storage: https://cloud.google.com/python/django/kubernetes-engine
    STATIC_URL = 'http://storage.googleapis.com/interview-instance/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# The folder to save Media (Now not use for production)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Date format 
DATE_FORMAT = "Y-m-d"

# Maxium file upload to the server
MAX_UPLOAD_SIZE = "5242880"

# Django Cache for faster access Database, now not use 
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'my_cache_table',
    }
}

# Django simple JWT config for Authentication: https://github.com/SimpleJWT/django-rest-framework-simplejwt
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}